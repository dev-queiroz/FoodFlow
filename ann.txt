# FoodFlow - MÃ³dulo de Pagamentos

==================================
1. OBJETIVO
==================================
- Cobrar mensalidade de R$120/mÃªs por restaurante.
- TolerÃ¢ncia de 3 dias apÃ³s vencimento.
- Bloqueio se passar dos 3 dias.
- RemoÃ§Ã£o apÃ³s 30 dias sem pagar.
- ExecuÃ§Ã£o automÃ¡tica com CRON.

==================================
2. ESTRUTURA DE DADOS (Supabase)
==================================
Tabela: subscriptions

CREATE TABLE subscriptions (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id uuid REFERENCES restaurants(id),
    status text CHECK (status IN ('active', 'grace', 'blocked', 'deleted')),
    start_date date NOT NULL,
    due_date date NOT NULL,
    last_payment date,
    created_at timestamp DEFAULT now()
);

# Status possÃ­veis:
- active  â†’ pagamento em dia
- grace   â†’ atÃ© 3 dias de tolerÃ¢ncia
- blocked â†’ mais de 3 dias sem pagar
- deleted â†’ removido apÃ³s 30 dias sem pagar

==================================
3. SERVICES (paymentService.js)
==================================

import { supabase } from '../utils/supabaseClient.js';

export async function registerSubscription(restaurantId) {
    const startDate = new Date();
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 30);

    const { data, error } = await supabase
        .from('subscriptions')
        .insert([{ restaurant_id: restaurantId, start_date: startDate, due_date: dueDate, status: 'active' }])
        .select()
        .single();

    if (error) throw error;
    return data;
}

export async function markAsPaid(subscriptionId) {
    const newDueDate = new Date();
    newDueDate.setDate(newDueDate.getDate() + 30);

    const { data, error } = await supabase
        .from('subscriptions')
        .update({ last_payment: new Date(), due_date: newDueDate, status: 'active' })
        .eq('id', subscriptionId)
        .select()
        .single();

    if (error) throw error;
    return data;
}

export async function checkSubscriptions() {
    const today = new Date();

    const { data: subs, error } = await supabase
        .from('subscriptions')
        .select('*')
        .in('status', ['active', 'grace', 'blocked']);

    if (error) throw error;

    for (const sub of subs) {
        const dueDate = new Date(sub.due_date);
        const diffDays = Math.floor((today - dueDate) / (1000 * 60 * 60 * 24));

        if (diffDays <= 0) continue; // Ainda em dia
        if (diffDays <= 3 && sub.status !== 'grace') {
            await supabase.from('subscriptions').update({ status: 'grace' }).eq('id', sub.id);
        } else if (diffDays > 3 && diffDays <= 30 && sub.status !== 'blocked') {
            await supabase.from('subscriptions').update({ status: 'blocked' }).eq('id', sub.id);
        } else if (diffDays > 30) {
            await supabase.from('subscriptions').update({ status: 'deleted' }).eq('id', sub.id);
            await deleteRestaurant(sub.restaurant_id);
        }
    }
}

async function deleteRestaurant(restaurantId) {
    await supabase.from('restaurants').delete().eq('id', restaurantId);
    // Supabase ON DELETE CASCADE deve cuidar das tabelas relacionadas
}

==================================
4. CRON JOB (paymentCron.js)
==================================

import cron from 'node-cron';
import { checkSubscriptions } from './services/paymentService.js';

cron.schedule('0 3 * * *', async () => {
    console.log('ðŸ”„ Verificando assinaturas...');
    await checkSubscriptions();
});

==================================
5. FLUXO OPERACIONAL
==================================
1. Cadastro de restaurante cria assinatura â†’ registerSubscription().
2. Dono paga manualmente â†’ markAsPaid().
3. Cron diÃ¡rio roda checkSubscriptions().
4. Sistema consulta status:
   - active / grace â†’ normal
   - blocked â†’ acesso bloqueado
   - deleted â†’ dados removidos

==================================
6. PONTOS DE ATENÃ‡ÃƒO
==================================
- Pagamentos ainda sem automaÃ§Ã£o (entrada manual).
- Usar ON DELETE CASCADE no Supabase para manter integridade.
- Apenas dono/admin pode marcar pagamentos.

==================================
7. O QUE TEMOS?
==================================
- Vide "./backend/DOC.md"